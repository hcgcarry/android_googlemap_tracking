package com.example.googlemap;
import com.google.android.gms.maps.UiSettings;
import androidx.fragment.app.FragmentActivity;

import android.app.Activity;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;

public class MapsActivity extends FragmentActivity implements OnMapReadyCallback {
    private String TAG="MapsActivityClass";

    private GoogleMap mMap;
    private Location location;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_maps);
        init();
        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        getLocation();
        activateMap();
        //checkLocationChange();
    }

    protected void checkLocationChange(){
        //網路的連接不能放在主thread
        new Thread(new Runnable() {
            @Override
            public void run() {
                while(true) {
                    if(location.locationHasChange==1){
                        updateMapLocation();
                        location.locationHasChange=0;
                        Log.d(TAG,"location change");
                    }
                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }).start();
    }
    private void init(){
        this.location = new Location();
        this.location.longitude=22.990825;
        this.location.latitude=120.219413;
    }
    private void getLocation(){
        this.location.get();
        //this.location.printLocation(TAG);
    }

    private void activateMap(){
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);


    }

    /**
     * Manipulates the map once available.
     * This callback is triggered when the map is ready to be used.
     * This is where we can add markers or lines, add listeners or move the camera. In this case,
     * we just add a marker near Sydney, Australia.
     * If Google Play services is not installed on the device, the user will be prompted to install
     * it inside the SupportMapFragment. This method will only be triggered once the user has
     * installed Google Play services and returned to the app.
     */
    @Override
    public void onMapReady(GoogleMap googleMap) {
        //location.printLocation(TAG);
        mMap = googleMap;
        mMap.setMinZoomPreference(12);
        mMap.setIndoorEnabled(true);
        UiSettings uiSettings = mMap.getUiSettings();
        uiSettings.setIndoorLevelPickerEnabled(false);
        uiSettings.setMyLocationButtonEnabled(true);
        uiSettings.setMapToolbarEnabled(false);
        uiSettings.setCompassEnabled(true);
        uiSettings.setZoomControlsEnabled(true);

        //LatLng ny = new LatLng(location.latitude, location.longitude);
        //LatLng ny = new LatLng(location.longitude, location.latitude);
        //LatLng ny = new LatLng(120.219413,22.990825);
        LatLng ny = new LatLng(22.990825,120.219413);

        MarkerOptions markerOptions = new MarkerOptions();
        markerOptions.position(ny);
        mMap.addMarker(markerOptions);

        mMap.moveCamera(CameraUpdateFactory.newLatLng(ny));
        mMap.animateCamera(CameraUpdateFactory.zoomTo(20));     // 放大地圖到 16 倍大
        //moveCameraLoop();
        //test();
    }

    private void updateMapLocation(){
        GetXMLTask task = new GetXMLTask();
        task.execute();
    }

    //@SuppressLint("NewApi")
    private class GetXMLTask extends AsyncTask<Void, Void, Void> {
        @Override
        protected Void doInBackground(Void... urls) {
            try {
            } catch (Exception e) {
            }
            return null;
        }

        @Override
        protected void onPostExecute(Void avoid) {
            super.onPostExecute(avoid);
            moveCamera();
            addCircle();
        }
    }
    private void addCircle(){
        LatLng ny = new LatLng(location.longitude, location.latitude);
        CircleOptions circleOptions = new CircleOptions();
        circleOptions.center(ny);
        circleOptions.radius(1);
        circleOptions.fillColor(Color.BLUE);
        circleOptions.strokeColor(Color.RED);
        circleOptions.strokeWidth(4);
        mMap.addCircle(circleOptions);
    }

    private void moveCamera() {
        location.printLocation(TAG);
        LatLng ny = new LatLng(location.longitude, location.latitude);
        mMap.animateCamera(CameraUpdateFactory.newCameraPosition(new CameraPosition.Builder().target(ny)
                .zoom(25).build()));
        Log.d(TAG, "-----move camera success!!!!!!!!!!!!");
    }

    /*
    private void moveCameraLoop(){
        new Thread(new Runnable() {

            @Override
            public void run() {
                FragmentActivity.runOnUIThread(new Runnable(){
                    public void run(){
                        location.printLocation(TAG);
                        LatLng ny = new LatLng(location.longitude, location.latitude);
                        mMap.animateCamera(CameraUpdateFactory.newCameraPosition(new CameraPosition.Builder().target(ny)
                                .zoom(13).build()));
                        Log.d(TAG,"move camera success");
                        try {
                            Thread.sleep(2000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                });
            }
        }).start();

    }
     */
}
